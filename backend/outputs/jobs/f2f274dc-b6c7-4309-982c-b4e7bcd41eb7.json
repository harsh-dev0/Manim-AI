{"status": "completed", "created_at": 1747323659.7859159, "prompt": "Explain me the binary Search Technique", "code": "# Binary Search Technique Explanation\nfrom manim import *\n\nclass BinarySearchExplanation(Scene):\n    def construct(self):\n        # Create a sorted list\n        sorted_list = [2, 4, 7, 10, 13, 16, 19, 22, 25, 28]\n        list_text = Text(str(sorted_list)).scale(0.7)\n        self.play(Write(list_text))\n        self.wait(1)\n        \n        # Explain the binary search process\n        steps_title = Text(\"Binary Search Steps:\").scale(0.8).to_edge(UP)\n        self.play(Write(steps_title))\n        \n        steps = [\n            \"1. Compare the target value with the middle element.\",\n            \"2. If the target value matches the middle element, return the index.\",\n            \"3. If the target value is greater, search the right half.\",\n            \"4. If the target value is smaller, search the left half.\",\n            \"5. Repeat steps 1-4 until the element is found or the list is exhausted.\"\n        ]\n        \n        step_texts = VGroup(*[Text(step).scale(0.5) for step in steps]).arrange(DOWN, aligned_edge=LEFT).next_to(steps_title, DOWN)\n        \n        for step_text in step_texts:\n            self.play(Write(step_text))\n            self.wait(1)\n        \n        # Demonstrate the binary search process\n        target = 16\n        target_text = Text(f\"Target: {target}\").scale(0.7).to_edge(DOWN)\n        self.play(Write(target_text))\n        \n        left = 0\n        right = len(sorted_list) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            mid_text = Text(f\"Middle index: {mid}\").scale(0.6).next_to(target_text, UP)\n            self.play(Write(mid_text))\n            self.wait(1)\n            \n            if sorted_list[mid] == target:\n                found_text = Text(f\"Target {target} found at index {mid}!\").scale(0.7).next_to(mid_text, UP)\n                self.play(Write(found_text), list_text[mid].animate.set_color(GREEN))\n                self.wait(2)\n                break\n            elif sorted_list[mid] < target:\n                left = mid + 1\n                self.play(list_text[:mid+1].animate.set_color(RED), mid_text.animate.set_color(RED))\n            else:\n                right = mid - 1\n                self.play(list_text[mid:].animate.set_color(RED), mid_text.animate.set_color(RED))\n            \n            self.wait(1)\n            self.play(FadeOut(mid_text))\n        \n        self.wait(2)", "title": "Binary Search Technique Explanation", "video_url": "/media/f2f274dc-b6c7-4309-982c-b4e7bcd41eb7.mp4"}